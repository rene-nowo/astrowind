---
import FormContainer from '~/components/ui/Form.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Contact as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  inputs,
  textarea,
  disclaimer,
  button,
  description,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  {
    inputs && (
      <div class="flex flex-col max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full">
        <FormContainer
          inputs={inputs}
          textarea={textarea}
          disclaimer={disclaimer}
          button={button}
          description={description}
        />
      </div>
    )
  }
</WidgetWrapper>



<script>
  import emailjs from '@emailjs/browser';

  console.log("Welcome, browser console in contacts!");

  // Wait for the DOM to fully load
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('.btn-primary');
    const form = document.querySelector('form'); // Assuming FormContainer renders a <form>

    if (button) {
      button.addEventListener('click', (event) => {
        console.log('Button clicked');
        event.preventDefault(); // Prevent form submission if necessary


        if (form) {
          const formData = new FormData(form); // Gather form data
          emailjs.init({
            publicKey: import.meta.env.PUBLIC_EMAILJS_PUBLIC_KEY,
            // Do not allow headless browsers
            blockHeadless: true,
            limitRate: {
              // Set the limit rate for the application
              id: 'app',
              // Allow 1 request per 10s
              throttle: 1000,
            },
          });
          emailjs
            .sendForm(import.meta.env.PUBLIC_EMAILJS_SERVICE_ID, import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID, form).then(
            (response) => {
                console.log('SUCCESS!', response.status, response.text);
              },
              (error) => {
                console.log('FAILED...', error);
              },
            );
        } else {
          console.error('Form element not found');
        }
      });
    } else {
      console.error('Button element not found');
    }
  });
</script>
